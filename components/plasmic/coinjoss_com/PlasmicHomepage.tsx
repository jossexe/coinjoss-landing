// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMfv1hg7t9bpqK5N2h2Xpc
// Component: X2eTwNfEQNyM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Button from "../../Button"; // plasmic-import: B2AzBChSZBa/component
import PriceCard from "../../PriceCard"; // plasmic-import: GHrZX-qnlG/component
import { DataFetcher } from "@plasmicpkgs/plasmic-query"; // plasmic-import: ae7V86eNoXA/codeComponent
import PercentChange from "../../PercentChange"; // plasmic-import: 62Il59Ijvz/component
import Footer from "../../Footer"; // plasmic-import: kSpHVPuP15V/component

import { useScreenVariants as useScreenVariantsoR09Sl7PmsYzr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: oR09Sl7pmsYZR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_coinjoss_com.module.css"; // plasmic-import: sMfv1hg7t9bpqK5N2h2Xpc/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: X2eTwNfEQNyM/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: C1r0wy0DtJv/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: xD4MiLWeXK-/icon
import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: vI1V6MDOzo/icon
import LikesvgIcon from "./icons/PlasmicIcon__Likesvg"; // plasmic-import: 8BF27-mrmX/icon
import ShieldTicksvgIcon from "./icons/PlasmicIcon__ShieldTicksvg"; // plasmic-import: sbvd34TJQy/icon
import FlashsvgIcon from "./icons/PlasmicIcon__Flashsvg"; // plasmic-import: QKB6RJd74E/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: APEFRjHk9f/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: 44iUqi7ALL/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: EEfbul6dCZ/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: mW29iQjOi4/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: 2GxFK8nmf9/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: NSdoEEgYbD/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: JlukcmvCZ/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: McB3OMMtcT/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  hero?: p.Flex<"section">;
  row?: p.Flex<"div">;
  h6?: p.Flex<"h6">;
  about?: p.Flex<"section">;
  row7?: p.Flex<"div">;
  items?: p.Flex<"div">;
  iconholder?: p.Flex<"div">;
  items2?: p.Flex<"div">;
  iconholder2?: p.Flex<"div">;
  items3?: p.Flex<"div">;
  iconholder3?: p.Flex<"div">;
  services?: p.Flex<"section">;
  row2?: p.Flex<"div">;
  faq?: p.Flex<"section">;
  row3?: p.Flex<"div">;
  cta?: p.Flex<"section">;
  row6?: p.Flex<"div">;
  partner?: p.Flex<"section">;
  row5?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsoR09Sl7PmsYzr()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames(projectcss.all, sty.navbar)}
          >
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__rsQ22
                  )}
                  component={Link}
                  href={"#" as const}
                  platform={"nextjs"}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__cP1Vy)}
                    displayHeight={"32px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/logo1Coinjosspng.png",
                      fullWidth: 1095,
                      fullHeight: 174,
                      aspectRatio: undefined
                    }}
                  />
                </p.PlasmicLink>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__htM16)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/close.svg" as const}
                />
              }
              forceOpenMenu={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : false
              }
              itemsGap={24 as const}
              menuItems={
                <React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__fQrf5
                    )}
                    component={Link}
                    href={"#about" as const}
                    platform={"nextjs"}
                  >
                    {"About"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__cjGAr
                    )}
                    component={Link}
                    href={"#services" as const}
                    platform={"nextjs"}
                  >
                    {"Services"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___3V16S
                    )}
                    component={Link}
                    href={"#faq" as const}
                    platform={"nextjs"}
                  >
                    {"FAQ"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__dCAvq
                    )}
                    component={Link}
                    href={"https://josscare.coinjoss.com/" as const}
                    platform={"nextjs"}
                  >
                    {"Contact"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__trHdF
                    )}
                    component={Link}
                    href={"https://platform.coinjoss.com/login" as const}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__suLCd
                      )}
                      color={"softBlue" as const}
                    >
                      {"Login"}
                    </Button>
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__ih5Cr
                    )}
                    component={Link}
                    href={"https://platform.coinjoss.com/register" as const}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__alpy1
                      )}
                      color={"blue" as const}
                    >
                      {"Register"}
                    </Button>
                  </p.PlasmicLink>
                </React.Fragment>
              }
              openButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__p9Kwo)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/menu.svg" as const}
                />
              }
              responsiveBreakpoint={768 as const}
            />
          </div>

          <p.Stack
            as={"section"}
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            hasGap={true}
            className={classNames(projectcss.all, sty.hero)}
          >
            <div
              data-plasmic-name={"row"}
              data-plasmic-override={overrides.row}
              className={classNames(projectcss.all, sty.row)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__echCr)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__loUtS)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__zoFek
                    )}
                  >
                    {
                      "Buy, Sell and Trade your cryptocurrency safely and comfortably."
                    }
                  </h1>

                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__mj5E3
                    )}
                  >
                    {
                      "With its quick trade platform, Coinjoss will provide you with a seamless experience in managing your cryptocurrencies"
                    }
                  </p>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__i85Ir
                    )}
                    component={Link}
                    href={"#services" as const}
                    platform={"nextjs"}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__uBcD5
                      )}
                      color={"blue" as const}
                      showEndIcon={true}
                      startIcon={
                        <ArrowRightsvgIcon
                          className={classNames(projectcss.all, sty.svg__cArez)}
                          role={"img"}
                        />
                      }
                    >
                      {"Learn More"}
                    </Button>
                  </p.PlasmicLink>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__c6Cvl)}
                  >
                    <h6
                      data-plasmic-name={"h6"}
                      data-plasmic-override={overrides.h6}
                      className={classNames(
                        projectcss.all,
                        projectcss.h6,
                        projectcss.__wab_text,
                        sty.h6
                      )}
                    >
                      {"Supervised and registered by :"}
                    </h6>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__c51RZ
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__usCo)}
                          displayHeight={"64px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/coinjoss_com/images/logoOfMinistryOfCommunicationAndInformationTechnologyOfTheRepublicOfIndonesiasvgpng.png",
                            fullWidth: 2060,
                            fullHeight: 2052,
                            aspectRatio: undefined
                          }}
                        />

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__eswhG
                          )}
                          component={Link}
                          href={
                            "http://asm.pqalindonesia.com/?i=page.result&keyword=qms%2F2209167&company=PT.+Coinjoss+Data+Utama" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__mQ9BS)}
                            displayHeight={"64px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/coinjoss_com/images/iso9001Jpg.jpeg",
                              fullWidth: 1280,
                              fullHeight: 811,
                              aspectRatio: undefined
                            }}
                          />
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___9KlPb
                          )}
                          component={Link}
                          href={
                            "http://asm.pqalindonesia.com/?i=page.result&keyword=isms%2F2209167&company=PT.+Coinjoss+Data+Utama" as const
                          }
                          platform={"nextjs"}
                          target={"_blank" as const}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__aJsln)}
                            displayHeight={"64px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"auto" as const}
                            loading={"lazy" as const}
                            src={{
                              src: "/plasmic/coinjoss_com/images/iso20071Jpg.jpeg",
                              fullWidth: 1280,
                              fullHeight: 811,
                              aspectRatio: undefined
                            }}
                          />
                        </p.PlasmicLink>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </p.Stack>

                <div className={classNames(projectcss.all, sty.column__mihJm)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__brdS8)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/heroCoinjosspng.png",
                      fullWidth: 1080,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </p.Stack>
            </div>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"about"}
            data-plasmic-override={overrides.about}
            hasGap={true}
            className={classNames(projectcss.all, sty.about)}
            id={"about" as const}
          >
            <div
              data-plasmic-name={"row7"}
              data-plasmic-override={overrides.row7}
              className={classNames(projectcss.all, sty.row7)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__gG2UF)}
              >
                <div className={classNames(projectcss.all, sty.column___44X2D)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___0I5)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("50%" as const)
                        : ("75%" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/btcmachinepng.png",
                      fullWidth: 1080,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column___6PgYk)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__eLqx8
                    )}
                  >
                    {"Why Coinjoss?"}
                  </h1>

                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__enA0A
                    )}
                  >
                    {
                      "Coinjoss is a digital asset trading platform that allows its users to trade, pay for goods or services and participate in projects within the Coinjoss ecosystem. The platform is a hybrid exchange, which provides users with security via custody of their own assets while they are not actively being traded, but also the speed and performance of a centralized trading engine."
                    }
                  </p>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__a9WEp)}
                  >
                    <div
                      data-plasmic-name={"items"}
                      data-plasmic-override={overrides.items}
                      className={classNames(projectcss.all, sty.items)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__od5Ww
                          )}
                        >
                          <div
                            data-plasmic-name={"iconholder"}
                            data-plasmic-override={overrides.iconholder}
                            className={classNames(
                              projectcss.all,
                              sty.iconholder
                            )}
                          >
                            <LikesvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qBb18
                              )}
                              role={"img"}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__skKpm
                            )}
                          >
                            {"Simple Experience"}
                          </div>
                        </p.Stack>
                      ) : null}
                    </div>

                    <div
                      data-plasmic-name={"items2"}
                      data-plasmic-override={overrides.items2}
                      className={classNames(projectcss.all, sty.items2)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__om9GY
                          )}
                        >
                          <div
                            data-plasmic-name={"iconholder2"}
                            data-plasmic-override={overrides.iconholder2}
                            className={classNames(
                              projectcss.all,
                              sty.iconholder2
                            )}
                          >
                            <ShieldTicksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__elMid
                              )}
                              role={"img"}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___21Fc
                            )}
                          >
                            {"Secure"}
                          </div>
                        </p.Stack>
                      ) : null}
                    </div>

                    <div
                      data-plasmic-name={"items3"}
                      data-plasmic-override={overrides.items3}
                      className={classNames(projectcss.all, sty.items3)}
                    >
                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7Bm9K
                          )}
                        >
                          <div
                            data-plasmic-name={"iconholder3"}
                            data-plasmic-override={overrides.iconholder3}
                            className={classNames(
                              projectcss.all,
                              sty.iconholder3
                            )}
                          >
                            <FlashsvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xYnHc
                              )}
                              role={"img"}
                            />
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kuh53
                            )}
                          >
                            {"Fast Transaction"}
                          </div>
                        </p.Stack>
                      ) : null}
                    </div>
                  </div>
                </p.Stack>
              </p.Stack>
            </div>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"services"}
            data-plasmic-override={overrides.services}
            hasGap={true}
            className={classNames(projectcss.all, sty.services)}
            id={"services" as const}
          >
            <div className={classNames(projectcss.all, sty.freeBox__jDaLa)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__bheFj
                )}
              >
                {"Our Services"}
              </h1>
            </div>

            <div
              data-plasmic-name={"row2"}
              data-plasmic-override={overrides.row2}
              className={classNames(projectcss.all, sty.row2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__yx4B1)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column___06Yeo)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__pHFlf)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("50%" as const)
                        : ("200px" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/exhcangequickpng.png",
                      fullWidth: 1080,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                  />

                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__xDpXy
                    )}
                  >
                    {"Quick Exchange"}
                  </h3>

                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__exs6P
                    )}
                  >
                    {
                      "Exchange your cryptocurrencies easily with the best rate on the market."
                    }
                  </p>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__oS7Oh)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__qtCf5)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("50%" as const)
                        : ("200px" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/stakingpng.png",
                      fullWidth: 1080,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                  />

                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__lS07I
                    )}
                  >
                    {"Staking"}
                  </h3>

                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__g7Y99
                    )}
                  >
                    {
                      "Generate cash flow with crypto up to 30% possible, without the complexity and protected by insurance up to $5,000,000*"
                    }
                  </p>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column___6L6QP)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__nGy0M)}
                    displayHeight={"200px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("50%" as const)
                        : ("200px" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/custodijosspng.png",
                      fullWidth: 1080,
                      fullHeight: 1080,
                      aspectRatio: undefined
                    }}
                  />

                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__qSi21
                    )}
                  >
                    {"Decentralized Exchange"}
                  </h3>

                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__c1Izm
                    )}
                  >
                    {
                      "Swap, Earn and Repeat, maximizing to increase your value."
                    }
                  </p>
                </p.Stack>
              </p.Stack>
            </div>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"faq"}
            data-plasmic-override={overrides.faq}
            hasGap={true}
            className={classNames(projectcss.all, sty.faq)}
            id={"faq" as const}
          >
            <div className={classNames(projectcss.all, sty.freeBox__y7VJ)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__bGwQu
                )}
              >
                {"Markets"}
              </h1>
            </div>

            <div
              data-plasmic-name={"row3"}
              data-plasmic-override={overrides.row3}
              className={classNames(projectcss.all, sty.row3)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__b0EmC)}>
                <PriceCard
                  className={classNames("__wab_instance", sty.priceCard__gPquF)}
                  content={
                    <DataFetcher
                      className={classNames(
                        "__wab_instance",
                        sty.httpApiFetcher___7IO2U
                      )}
                      dataName={"fetchedData" as const}
                      errorDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Error fetching data"}
                        </ph.DataCtxReader>
                      }
                      headers={{
                        "Content-Type": "application/json",
                        Accept: "application/json"
                      }}
                      loadingDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Loading..."}
                        </ph.DataCtxReader>
                      }
                      method={"GET" as const}
                      noLayout={false}
                      url={
                        "https://price.coinjoss.com/v1/price/BTC_IDR" as const
                      }
                    >
                      <ph.DataCtxReader>
                        {$ctx =>
                          true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jwa0D
                              )}
                            >
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  sty.span__aIhbP
                                )}
                              >
                                {(() => {
                                  try {
                                    return new Intl.NumberFormat("id-ID", {
                                      style: "currency",
                                      currency: "IDR"
                                    }).format($ctx.fetchedData.data.sell);
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Rp 325.710.973,63";
                                    }
                                    throw e;
                                  }
                                })()}
                              </span>

                              <PercentChange
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentChange__yEv6C
                                )}
                                minus={
                                  $ctx.fetchedData.data.percent_change <= 0
                                }
                              >
                                {(() => {
                                  try {
                                    return (
                                      $ctx.fetchedData.data.percent_change +
                                      " %"
                                    );
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </PercentChange>
                            </p.Stack>
                          ) : null
                        }
                      </ph.DataCtxReader>
                    </DataFetcher>
                  }
                  header={
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__s4GfZ)}
                    >
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__mbiwf)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4___9U2T8
                        )}
                      >
                        {"BTC / IDR"}
                      </h4>
                    </p.Stack>
                  }
                />

                <PriceCard
                  className={classNames("__wab_instance", sty.priceCard__dVoRx)}
                  content={
                    <DataFetcher
                      className={classNames(
                        "__wab_instance",
                        sty.httpApiFetcher__qznxz
                      )}
                      dataName={"fetchedData" as const}
                      errorDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Error fetching data"}
                        </ph.DataCtxReader>
                      }
                      headers={{
                        "Content-Type": "application/json",
                        Accept: "application/json"
                      }}
                      loadingDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Loading..."}
                        </ph.DataCtxReader>
                      }
                      method={"GET" as const}
                      noLayout={false}
                      url={
                        "https://price.coinjoss.com/v1/price/ETH_IDR" as const
                      }
                    >
                      <ph.DataCtxReader>
                        {$ctx =>
                          true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hk52W
                              )}
                            >
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  sty.span__iQdZo
                                )}
                              >
                                {(() => {
                                  try {
                                    return new Intl.NumberFormat("id-ID", {
                                      style: "currency",
                                      currency: "IDR"
                                    }).format($ctx.fetchedData.data.sell);
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Rp 24.781.862,80";
                                    }
                                    throw e;
                                  }
                                })()}
                              </span>

                              <PercentChange
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentChange___9X7Qh
                                )}
                                minus={
                                  $ctx.fetchedData.data.percent_change <= 0
                                }
                              >
                                {(() => {
                                  try {
                                    return (
                                      $ctx.fetchedData.data.percent_change +
                                      " %"
                                    );
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </PercentChange>
                            </p.Stack>
                          ) : null
                        }
                      </ph.DataCtxReader>
                    </DataFetcher>
                  }
                  header={
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4OUxv
                      )}
                    >
                      <Icon5Icon
                        className={classNames(projectcss.all, sty.svg__heUdJ)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__lFTdy
                        )}
                      >
                        {"ETH / IDR"}
                      </h4>
                    </p.Stack>
                  }
                />

                <PriceCard
                  className={classNames("__wab_instance", sty.priceCard__oNoXm)}
                  content={
                    <DataFetcher
                      className={classNames(
                        "__wab_instance",
                        sty.httpApiFetcher__hobw
                      )}
                      dataName={"fetchedData" as const}
                      errorDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Error fetching data"}
                        </ph.DataCtxReader>
                      }
                      headers={{
                        "Content-Type": "application/json",
                        Accept: "application/json"
                      }}
                      loadingDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Loading..."}
                        </ph.DataCtxReader>
                      }
                      method={"GET" as const}
                      noLayout={false}
                      url={
                        "https://price.coinjoss.com/v1/price/USDT_IDR" as const
                      }
                    >
                      <ph.DataCtxReader>
                        {$ctx =>
                          true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jyNp
                              )}
                            >
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  sty.span__toWq1
                                )}
                              >
                                {(() => {
                                  try {
                                    return new Intl.NumberFormat("id-ID", {
                                      style: "currency",
                                      currency: "IDR"
                                    }).format($ctx.fetchedData.data.sell);
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Rp 15.673,55";
                                    }
                                    throw e;
                                  }
                                })()}
                              </span>

                              <PercentChange
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentChange__z4EWn
                                )}
                                minus={
                                  $ctx.fetchedData.data.percent_change <= 0
                                }
                              >
                                {(() => {
                                  try {
                                    return (
                                      $ctx.fetchedData.data.percent_change +
                                      " %"
                                    );
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </PercentChange>
                            </p.Stack>
                          ) : null
                        }
                      </ph.DataCtxReader>
                    </DataFetcher>
                  }
                  header={
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__s9Glk)}
                    >
                      <Icon6Icon
                        className={classNames(projectcss.all, sty.svg__eAt0V)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__fruWo
                        )}
                      >
                        {"USDT / IDR"}
                      </h4>
                    </p.Stack>
                  }
                />

                <PriceCard
                  className={classNames("__wab_instance", sty.priceCard__e6Qhn)}
                  content={
                    <DataFetcher
                      className={classNames(
                        "__wab_instance",
                        sty.httpApiFetcher__jXCrs
                      )}
                      dataName={"fetchedData" as const}
                      errorDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Error fetching data"}
                        </ph.DataCtxReader>
                      }
                      headers={{
                        "Content-Type": "application/json",
                        Accept: "application/json"
                      }}
                      loadingDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Loading..."}
                        </ph.DataCtxReader>
                      }
                      method={"GET" as const}
                      noLayout={false}
                      url={
                        "https://price.coinjoss.com/v1/price/BNB_IDR" as const
                      }
                    >
                      <ph.DataCtxReader>
                        {$ctx =>
                          true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gy5Jb
                              )}
                            >
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  sty.span__ex6Y4
                                )}
                              >
                                {(() => {
                                  try {
                                    return new Intl.NumberFormat("id-ID", {
                                      style: "currency",
                                      currency: "IDR"
                                    }).format($ctx.fetchedData.data.sell);
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Rp 5.169.438,97";
                                    }
                                    throw e;
                                  }
                                })()}
                              </span>

                              <PercentChange
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentChange__iyjTe
                                )}
                                minus={
                                  $ctx.fetchedData.data.percent_change <= 0
                                }
                              >
                                {(() => {
                                  try {
                                    return (
                                      $ctx.fetchedData.data.percent_change +
                                      " %"
                                    );
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </PercentChange>
                            </p.Stack>
                          ) : null
                        }
                      </ph.DataCtxReader>
                    </DataFetcher>
                  }
                  header={
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kFaLs)}
                    >
                      <Icon7Icon
                        className={classNames(projectcss.all, sty.svg__rdxct)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__oak
                        )}
                      >
                        {"BNB / IDR"}
                      </h4>
                    </p.Stack>
                  }
                />

                <PriceCard
                  className={classNames("__wab_instance", sty.priceCard__tumSh)}
                  content={
                    <DataFetcher
                      className={classNames(
                        "__wab_instance",
                        sty.httpApiFetcher___3HLjj
                      )}
                      dataName={"fetchedData" as const}
                      errorDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Error fetching data"}
                        </ph.DataCtxReader>
                      }
                      headers={{
                        "Content-Type": "application/json",
                        Accept: "application/json"
                      }}
                      loadingDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Loading..."}
                        </ph.DataCtxReader>
                      }
                      method={"GET" as const}
                      noLayout={false}
                      url={
                        "https://price.coinjoss.com/v1/price/MATIC_IDR" as const
                      }
                    >
                      <ph.DataCtxReader>
                        {$ctx =>
                          true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___5Vl9Q
                              )}
                            >
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  sty.span__bvqXj
                                )}
                              >
                                {(() => {
                                  try {
                                    return new Intl.NumberFormat("id-ID", {
                                      style: "currency",
                                      currency: "IDR"
                                    }).format($ctx.fetchedData.data.sell);
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Rp 19.355,52";
                                    }
                                    throw e;
                                  }
                                })()}
                              </span>

                              <PercentChange
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentChange__onepi
                                )}
                                minus={
                                  $ctx.fetchedData.data.percent_change <= 0
                                }
                              >
                                {(() => {
                                  try {
                                    return (
                                      $ctx.fetchedData.data.percent_change +
                                      " %"
                                    );
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </PercentChange>
                            </p.Stack>
                          ) : null
                        }
                      </ph.DataCtxReader>
                    </DataFetcher>
                  }
                  header={
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__slcdf)}
                    >
                      <Icon8Icon
                        className={classNames(projectcss.all, sty.svg__ibYyM)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4___2JC1
                        )}
                      >
                        {"MATIC / IDR"}
                      </h4>
                    </p.Stack>
                  }
                />

                <PriceCard
                  className={classNames("__wab_instance", sty.priceCard__wGkFt)}
                  content={
                    <DataFetcher
                      className={classNames(
                        "__wab_instance",
                        sty.httpApiFetcher__lhVqU
                      )}
                      dataName={"fetchedData" as const}
                      errorDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Error fetching data"}
                        </ph.DataCtxReader>
                      }
                      headers={{
                        "Content-Type": "application/json",
                        Accept: "application/json"
                      }}
                      loadingDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Loading..."}
                        </ph.DataCtxReader>
                      }
                      method={"GET" as const}
                      noLayout={false}
                      url={
                        "https://price.coinjoss.com/v1/price/SOL_IDR" as const
                      }
                    >
                      <ph.DataCtxReader>
                        {$ctx =>
                          true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__m2FM
                              )}
                            >
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  sty.span__i8LPj
                                )}
                              >
                                {(() => {
                                  try {
                                    return new Intl.NumberFormat("id-ID", {
                                      style: "currency",
                                      currency: "IDR"
                                    }).format($ctx.fetchedData.data.sell);
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Rp 496.033,45";
                                    }
                                    throw e;
                                  }
                                })()}
                              </span>

                              <PercentChange
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentChange__p5G1R
                                )}
                                minus={
                                  $ctx.fetchedData.data.percent_change <= 0
                                }
                              >
                                {(() => {
                                  try {
                                    return (
                                      $ctx.fetchedData.data.percent_change +
                                      " %"
                                    );
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </PercentChange>
                            </p.Stack>
                          ) : null
                        }
                      </ph.DataCtxReader>
                    </DataFetcher>
                  }
                  header={
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__tkvfz)}
                    >
                      <Icon9Icon
                        className={classNames(projectcss.all, sty.svg__mIysO)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4___3UGb
                        )}
                      >
                        {"SOL / IDR"}
                      </h4>
                    </p.Stack>
                  }
                />

                <PriceCard
                  className={classNames("__wab_instance", sty.priceCard__nZBhc)}
                  content={
                    <DataFetcher
                      className={classNames(
                        "__wab_instance",
                        sty.httpApiFetcher__tQlYn
                      )}
                      dataName={"fetchedData" as const}
                      errorDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Error fetching data"}
                        </ph.DataCtxReader>
                      }
                      headers={{
                        "Content-Type": "application/json",
                        Accept: "application/json"
                      }}
                      loadingDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Loading..."}
                        </ph.DataCtxReader>
                      }
                      method={"GET" as const}
                      noLayout={false}
                      url={
                        "https://price.coinjoss.com/v1/price/DOT_IDR" as const
                      }
                    >
                      <ph.DataCtxReader>
                        {$ctx =>
                          true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__pBst3
                              )}
                            >
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  sty.span___3KIp8
                                )}
                              >
                                {(() => {
                                  try {
                                    return new Intl.NumberFormat("id-ID", {
                                      style: "currency",
                                      currency: "IDR"
                                    }).format($ctx.fetchedData.data.sell);
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Rp 110.683,85";
                                    }
                                    throw e;
                                  }
                                })()}
                              </span>

                              <PercentChange
                                className={classNames(
                                  "__wab_instance",
                                  sty.percentChange___9UqQg
                                )}
                                minus={
                                  $ctx.fetchedData.data.percent_change <= 0
                                }
                              >
                                {(() => {
                                  try {
                                    return (
                                      $ctx.fetchedData.data.percent_change +
                                      " %"
                                    );
                                  } catch (e) {
                                    if (e instanceof TypeError) {
                                      return "Enter some text";
                                    }
                                    throw e;
                                  }
                                })()}
                              </PercentChange>
                            </p.Stack>
                          ) : null
                        }
                      </ph.DataCtxReader>
                    </DataFetcher>
                  }
                  header={
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lumQb)}
                    >
                      <Icon10Icon
                        className={classNames(projectcss.all, sty.svg__kInIt)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4___4PgtU
                        )}
                      >
                        {"DOT / IDR"}
                      </h4>
                    </p.Stack>
                  }
                />

                <PriceCard
                  className={classNames("__wab_instance", sty.priceCard__gzW54)}
                  content={
                    <DataFetcher
                      className={classNames(
                        "__wab_instance",
                        sty.httpApiFetcher__s7WxO
                      )}
                      dataName={"fetchedData" as const}
                      errorDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Error fetching data"}
                        </ph.DataCtxReader>
                      }
                      headers={{
                        "Content-Type": "application/json",
                        Accept: "application/json"
                      }}
                      loadingDisplay={
                        <ph.DataCtxReader>
                          {$ctx => "Loading..."}
                        </ph.DataCtxReader>
                      }
                      method={"GET" as const}
                      noLayout={false}
                      url={
                        "https://price.coinjoss.com/v1/price/DOT_IDR" as const
                      }
                    >
                      <ph.DataCtxReader>
                        {$ctx => (
                          <DataFetcher
                            className={classNames(
                              "__wab_instance",
                              sty.httpApiFetcher___9QlxL
                            )}
                            dataName={"fetchedData" as const}
                            errorDisplay={
                              <ph.DataCtxReader>
                                {$ctx => "Error fetching data"}
                              </ph.DataCtxReader>
                            }
                            headers={{
                              "Content-Type": "application/json",
                              Accept: "application/json"
                            }}
                            loadingDisplay={
                              <ph.DataCtxReader>
                                {$ctx => "Loading..."}
                              </ph.DataCtxReader>
                            }
                            method={"GET" as const}
                            noLayout={false}
                            url={
                              "https://price.coinjoss.com/v1/price/ADA_IDR" as const
                            }
                          >
                            <ph.DataCtxReader>
                              {$ctx =>
                                true ? (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ag83I
                                    )}
                                  >
                                    <span
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.span,
                                        projectcss.__wab_text,
                                        sty.span__jge3
                                      )}
                                    >
                                      {(() => {
                                        try {
                                          return new Intl.NumberFormat(
                                            "id-ID",
                                            {
                                              style: "currency",
                                              currency: "IDR"
                                            }
                                          ).format($ctx.fetchedData.data.sell);
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "Rp 6.411.48";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </span>

                                    <PercentChange
                                      className={classNames(
                                        "__wab_instance",
                                        sty.percentChange__twMha
                                      )}
                                      minus={
                                        $ctx.fetchedData.data.percent_change <=
                                        0
                                      }
                                    >
                                      {(() => {
                                        try {
                                          return (
                                            $ctx.fetchedData.data
                                              .percent_change + " %"
                                          );
                                        } catch (e) {
                                          if (e instanceof TypeError) {
                                            return "Enter some text";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </PercentChange>
                                  </p.Stack>
                                ) : null
                              }
                            </ph.DataCtxReader>
                          </DataFetcher>
                        )}
                      </ph.DataCtxReader>
                    </DataFetcher>
                  }
                  header={
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ft6Pl)}
                    >
                      <Icon11Icon
                        className={classNames(projectcss.all, sty.svg__ewknJ)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__hxAri
                        )}
                      >
                        {"ADA / IDR"}
                      </h4>
                    </p.Stack>
                  }
                />
              </div>
            </div>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"cta"}
            data-plasmic-override={overrides.cta}
            hasGap={true}
            className={classNames(projectcss.all, sty.cta)}
          >
            <div
              data-plasmic-name={"row6"}
              data-plasmic-override={overrides.row6}
              className={classNames(projectcss.all, sty.row6)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oBmxQ)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__vyLrS
                  )}
                >
                  {
                    "Take part in redefining digital assets ownership and exchange, through our state-of-the-art ecosystem"
                  }
                </h3>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___4WrSk
                  )}
                  component={Link}
                  href={"https://platform.coinjoss.com/register" as const}
                  platform={"nextjs"}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__opsae)}
                    color={"white" as const}
                  >
                    {"Register Now"}
                  </Button>
                </p.PlasmicLink>
              </p.Stack>
            </div>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"partner"}
            data-plasmic-override={overrides.partner}
            hasGap={true}
            className={classNames(projectcss.all, sty.partner)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__n5OYk)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1___1DGaE
                )}
              >
                {"Payment Services Provided by"}
              </h1>
            </div>

            <div
              data-plasmic-name={"row5"}
              data-plasmic-override={overrides.row5}
              className={classNames(projectcss.all, sty.row5)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___9I1Vk)}>
                <div className={classNames(projectcss.all, sty.freeBox__nTkFp)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__feXo1)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("32px" as const)
                        : ("72px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/cybavopng.png",
                      fullWidth: 374,
                      fullHeight: 160,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__jSeNo)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__yT9Vg)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("32px" as const)
                        : ("72px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/xenditpng.png",
                      fullWidth: 219,
                      fullHeight: 74,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__gfQ)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__nkGqc)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("24px" as const)
                        : ("72px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/bcapng.png",
                      fullWidth: 171,
                      fullHeight: 54,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___8NbYf)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__kNq0I)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("32px" as const)
                        : ("72px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/mandiripng.png",
                      fullWidth: 184,
                      fullHeight: 57,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__jomck)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__huqww)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("32px" as const)
                        : ("72px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/gnosispng.png",
                      fullWidth: 348,
                      fullHeight: 145,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__aR4TU)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___4YcJ0)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("42px" as const)
                        : ("92px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/coinjoss_com/images/locktonpng.png",
                      fullWidth: 3000,
                      fullHeight: 2000,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "navigationBar",
    "hero",
    "row",
    "h6",
    "about",
    "row7",
    "items",
    "iconholder",
    "items2",
    "iconholder2",
    "items3",
    "iconholder3",
    "services",
    "row2",
    "faq",
    "row3",
    "cta",
    "row6",
    "partner",
    "row5",
    "footer"
  ],
  navbar: ["navbar", "navigationBar"],
  navigationBar: ["navigationBar"],
  hero: ["hero", "row", "h6"],
  row: ["row", "h6"],
  h6: ["h6"],
  about: [
    "about",
    "row7",
    "items",
    "iconholder",
    "items2",
    "iconholder2",
    "items3",
    "iconholder3"
  ],
  row7: [
    "row7",
    "items",
    "iconholder",
    "items2",
    "iconholder2",
    "items3",
    "iconholder3"
  ],
  items: ["items", "iconholder"],
  iconholder: ["iconholder"],
  items2: ["items2", "iconholder2"],
  iconholder2: ["iconholder2"],
  items3: ["items3", "iconholder3"],
  iconholder3: ["iconholder3"],
  services: ["services", "row2"],
  row2: ["row2"],
  faq: ["faq", "row3"],
  row3: ["row3"],
  cta: ["cta", "row6"],
  row6: ["row6"],
  partner: ["partner", "row5"],
  row5: ["row5"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: "div";
  navigationBar: typeof NavigationBar;
  hero: "section";
  row: "div";
  h6: "h6";
  about: "section";
  row7: "div";
  items: "div";
  iconholder: "div";
  items2: "div";
  iconholder2: "div";
  items3: "div";
  iconholder3: "div";
  services: "section";
  row2: "div";
  faq: "section";
  row3: "div";
  cta: "section";
  row6: "div";
  partner: "section";
  row5: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    navigationBar: makeNodeComponent("navigationBar"),
    hero: makeNodeComponent("hero"),
    row: makeNodeComponent("row"),
    h6: makeNodeComponent("h6"),
    about: makeNodeComponent("about"),
    row7: makeNodeComponent("row7"),
    items: makeNodeComponent("items"),
    iconholder: makeNodeComponent("iconholder"),
    items2: makeNodeComponent("items2"),
    iconholder2: makeNodeComponent("iconholder2"),
    items3: makeNodeComponent("items3"),
    iconholder3: makeNodeComponent("iconholder3"),
    services: makeNodeComponent("services"),
    row2: makeNodeComponent("row2"),
    faq: makeNodeComponent("faq"),
    row3: makeNodeComponent("row3"),
    cta: makeNodeComponent("cta"),
    row6: makeNodeComponent("row6"),
    partner: makeNodeComponent("partner"),
    row5: makeNodeComponent("row5"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
