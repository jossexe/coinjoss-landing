// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMfv1hg7t9bpqK5N2h2Xpc
// Component: 62Il59Ijvz
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_coinjoss_com.module.css"; // plasmic-import: sMfv1hg7t9bpqK5N2h2Xpc/projectcss
import sty from "./PlasmicPercentChange.module.css"; // plasmic-import: 62Il59Ijvz/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: gK8wloD7bf/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 4TUkBRaSUJ/icon

export type PlasmicPercentChange__VariantMembers = {
  minus: "minus";
};
export type PlasmicPercentChange__VariantsArgs = {
  minus?: SingleBooleanChoiceArg<"minus">;
};
type VariantPropType = keyof PlasmicPercentChange__VariantsArgs;
export const PlasmicPercentChange__VariantProps = new Array<VariantPropType>(
  "minus"
);

export type PlasmicPercentChange__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPercentChange__ArgsType;
export const PlasmicPercentChange__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicPercentChange__OverridesType = {
  root?: p.Flex<"div">;
  up?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultPercentChangeProps {
  children?: React.ReactNode;
  minus?: SingleBooleanChoiceArg<"minus">;
  className?: string;
}

function PlasmicPercentChange__RenderFunc(props: {
  variants: PlasmicPercentChange__VariantsArgs;
  args: PlasmicPercentChange__ArgsType;
  overrides: PlasmicPercentChange__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.PlasmicIcon
        data-plasmic-name={"up"}
        data-plasmic-override={overrides.up}
        PlasmicIconType={
          hasVariant(variants, "minus", "minus") ? Icon4Icon : Icon3Icon
        }
        className={classNames(projectcss.all, sty.up, {
          [sty.upminus]: hasVariant(variants, "minus", "minus")
        })}
        role={"img"}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxminus]: hasVariant(variants, "minus", "minus")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenminus]: hasVariant(
              variants,
              "minus",
              "minus"
            )
          })
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "up", "freeBox"],
  up: ["up"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  up: "svg";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPercentChange__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPercentChange__VariantsArgs;
    args?: PlasmicPercentChange__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPercentChange__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPercentChange__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPercentChange__ArgProps,
          internalVariantPropNames: PlasmicPercentChange__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPercentChange__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPercentChange";
  } else {
    func.displayName = `PlasmicPercentChange.${nodeName}`;
  }
  return func;
}

export const PlasmicPercentChange = Object.assign(
  // Top-level PlasmicPercentChange renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    up: makeNodeComponent("up"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicPercentChange
    internalVariantProps: PlasmicPercentChange__VariantProps,
    internalArgProps: PlasmicPercentChange__ArgProps
  }
);

export default PlasmicPercentChange;
/* prettier-ignore-end */
