// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sMfv1hg7t9bpqK5N2h2Xpc
// Component: kSpHVPuP15V
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsoR09Sl7PmsYzr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: oR09Sl7pmsYZR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_coinjoss_com.module.css"; // plasmic-import: sMfv1hg7t9bpqK5N2h2Xpc/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: kSpHVPuP15V/css

import FacebookSvgrepoComsvgIcon from "./icons/PlasmicIcon__FacebookSvgrepoComsvg"; // plasmic-import: a9385cNnDv/icon
import InstagramSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__InstagramSvgrepoCom1Svg"; // plasmic-import: RpEl5pb15K/icon
import TwitterSvgrepoComsvgIcon from "./icons/PlasmicIcon__TwitterSvgrepoComsvg"; // plasmic-import: W3lydZRry9/icon
import MediumCircleSvgrepoComsvgIcon from "./icons/PlasmicIcon__MediumCircleSvgrepoComsvg"; // plasmic-import: LteOjVPvvt/icon
import LinkedinSvgrepoComsvgIcon from "./icons/PlasmicIcon__LinkedinSvgrepoComsvg"; // plasmic-import: -JrcytDXSf/icon
import DiscordSvgrepoComsvgIcon from "./icons/PlasmicIcon__DiscordSvgrepoComsvg"; // plasmic-import: shO8z3gKYM/icon
import TelegramSvgrepoCom2SvgIcon from "./icons/PlasmicIcon__TelegramSvgrepoCom2Svg"; // plasmic-import: GUGaE4NCXF/icon

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"section">;
  row7?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  freeBox?: p.Flex<"div">;
  socmedWrapper?: p.Flex<"div">;
  socmed?: p.Flex<"a"> & Partial<LinkProps>;
  socmed2?: p.Flex<"a"> & Partial<LinkProps>;
  socmed3?: p.Flex<"a"> & Partial<LinkProps>;
  socmed4?: p.Flex<"a"> & Partial<LinkProps>;
  socmed5?: p.Flex<"a"> & Partial<LinkProps>;
  socmed6?: p.Flex<"a"> & Partial<LinkProps>;
  socmed7?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultFooterProps {
  className?: string;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsoR09Sl7PmsYzr()
  });

  return (
    <p.Stack
      as={"section"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"row7"}
        data-plasmic-override={overrides.row7}
        className={classNames(projectcss.all, sty.row7)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__mh1Bb)}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"32px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/coinjoss_com/images/logo1Coinjosspng.png",
                fullWidth: 1095,
                fullHeight: 174,
                aspectRatio: undefined
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uKxwR
              )}
            >
              {"Jl. Danau Tamblingan No.160, Sanur, Denpasar,\nBali 80228"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__y7W0G)}
          >
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__vd78C
              )}
              component={Link}
              href={"https://blog.coinjoss.com/" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kJub3
                )}
              >
                {"Blog"}
              </div>
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___60DzR
              )}
              component={Link}
              href={"https://platform.coinjoss.com/login" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oulCi
                )}
              >
                {"Quick Exchange"}
              </div>
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__rkCd
              )}
              component={Link}
              href={"https://platform.coinjoss.com/login" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pymkW
                )}
              >
                {"Staking"}
              </div>
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__bMeDb
              )}
              component={Link}
              href={
                "https://coinjoss-87w3b73jc-rezaprimasatya.vercel.app/swap" as const
              }
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nf9Qm
                )}
              >
                {"Decentralized Exchange"}
              </div>
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__eLgMn
              )}
              component={Link}
              href={"https://josscare.coinjoss.com/" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s9V0G
                )}
              >
                {"Josscare"}
              </div>
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__wZEfA)}
          >
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__vNxTi
              )}
              component={Link}
              href={"https://coinjoss.com/term-and-conditions" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__npWMq
                )}
              >
                {"Terms of Service"}
              </div>
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___2ZgS
              )}
              component={Link}
              href={"https://coinjoss.com/privacy-policy" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iushz
                )}
              >
                {"Privacy Policy"}
              </div>
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__wgaeA
              )}
              component={Link}
              href={"https://coinjoss.com/faq" as const}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wm7Rv
                )}
              >
                {"FAQ"}
              </div>
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__a6Wz)}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cVwA5
                )}
              >
                {"Our Social Media"}
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"socmedWrapper"}
              data-plasmic-override={overrides.socmedWrapper}
              hasGap={true}
              className={classNames(projectcss.all, sty.socmedWrapper)}
            >
              <p.PlasmicLink
                data-plasmic-name={"socmed"}
                data-plasmic-override={overrides.socmed}
                className={classNames(projectcss.all, projectcss.a, sty.socmed)}
                component={Link}
                href={"https://www.facebook.com/coinjossofficial" as const}
                platform={"nextjs"}
              >
                <FacebookSvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg___2QhAh)}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                data-plasmic-name={"socmed2"}
                data-plasmic-override={overrides.socmed2}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.socmed2
                )}
                component={Link}
                href={"https://www.instagram.com/coinjossofficial/" as const}
                platform={"nextjs"}
              >
                <InstagramSvgrepoCom1SvgIcon
                  className={classNames(projectcss.all, sty.svg__w2NB5)}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                data-plasmic-name={"socmed3"}
                data-plasmic-override={overrides.socmed3}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.socmed3
                )}
                component={Link}
                href={"https://twitter.com/coinjoss" as const}
                platform={"nextjs"}
              >
                <TwitterSvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg__ibj5C)}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                data-plasmic-name={"socmed4"}
                data-plasmic-override={overrides.socmed4}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.socmed4
                )}
                component={Link}
                href={"https://medium.com/coinjoss" as const}
                platform={"nextjs"}
              >
                <MediumCircleSvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg__pyt0U)}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                data-plasmic-name={"socmed5"}
                data-plasmic-override={overrides.socmed5}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.socmed5
                )}
                component={Link}
                href={"https://www.linkedin.com/company/coinjoss/" as const}
                platform={"nextjs"}
              >
                <LinkedinSvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg__bwchi)}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                data-plasmic-name={"socmed6"}
                data-plasmic-override={overrides.socmed6}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.socmed6
                )}
                component={Link}
                platform={"nextjs"}
              >
                <DiscordSvgrepoComsvgIcon
                  className={classNames(projectcss.all, sty.svg__czKy8)}
                  role={"img"}
                />
              </p.PlasmicLink>

              <p.PlasmicLink
                data-plasmic-name={"socmed7"}
                data-plasmic-override={overrides.socmed7}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.socmed7
                )}
                component={Link}
                href={"https://t.me/CoinjossChannel" as const}
                platform={"nextjs"}
              >
                <TelegramSvgrepoCom2SvgIcon
                  className={classNames(projectcss.all, sty.svg__gE3Ge)}
                  role={"img"}
                />
              </p.PlasmicLink>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__vm7OP
        )}
      >
        {"© 2019 - 2022 Coinjoss.com. All rights reserved"}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "row7",
    "columns",
    "img",
    "freeBox",
    "socmedWrapper",
    "socmed",
    "socmed2",
    "socmed3",
    "socmed4",
    "socmed5",
    "socmed6",
    "socmed7"
  ],
  row7: [
    "row7",
    "columns",
    "img",
    "freeBox",
    "socmedWrapper",
    "socmed",
    "socmed2",
    "socmed3",
    "socmed4",
    "socmed5",
    "socmed6",
    "socmed7"
  ],
  columns: [
    "columns",
    "img",
    "freeBox",
    "socmedWrapper",
    "socmed",
    "socmed2",
    "socmed3",
    "socmed4",
    "socmed5",
    "socmed6",
    "socmed7"
  ],
  img: ["img"],
  freeBox: ["freeBox"],
  socmedWrapper: [
    "socmedWrapper",
    "socmed",
    "socmed2",
    "socmed3",
    "socmed4",
    "socmed5",
    "socmed6",
    "socmed7"
  ],
  socmed: ["socmed"],
  socmed2: ["socmed2"],
  socmed3: ["socmed3"],
  socmed4: ["socmed4"],
  socmed5: ["socmed5"],
  socmed6: ["socmed6"],
  socmed7: ["socmed7"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  row7: "div";
  columns: "div";
  img: typeof p.PlasmicImg;
  freeBox: "div";
  socmedWrapper: "div";
  socmed: "a";
  socmed2: "a";
  socmed3: "a";
  socmed4: "a";
  socmed5: "a";
  socmed6: "a";
  socmed7: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    row7: makeNodeComponent("row7"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    socmedWrapper: makeNodeComponent("socmedWrapper"),
    socmed: makeNodeComponent("socmed"),
    socmed2: makeNodeComponent("socmed2"),
    socmed3: makeNodeComponent("socmed3"),
    socmed4: makeNodeComponent("socmed4"),
    socmed5: makeNodeComponent("socmed5"),
    socmed6: makeNodeComponent("socmed6"),
    socmed7: makeNodeComponent("socmed7"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
